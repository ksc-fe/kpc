import {linkEvent} from 'intact';
import {DropdownMenu} from '../dropdown';
import {DatepickerCalendar} from './calendar';
import {DatepickerTime} from './time';
import {Icon} from '../icon';
import {Button} from '../button';
import {_$} from '../../i18n';
import {makeStyles, makePanelStyles, makeHighlightStyles} from './styles';
import {PanelFlags} from './usePanel';
import {isFunction} from 'intact-shared';
import {Tabs, Tab} from '../tabs';
import {Position} from './useHighlight';

const { k } = this.config;
const {className, type, range, multiple, shortcuts, size} = this.get();
const {
    value: {value},
    onChangeDate,
    /* onConfirm, */
    onChangeTime,
    onChangeDateForRange,
    getTimeValue,
} = this.value;
const { onConfirm } = this.confirm;
const { position, handleInputClick, highlightWidth, highlightLeft } = this.highlight;
// 判断是否显示双面板
const showDualPanels = range && type !== 'datetime';

const classNameObj = {
    [`${k}-datepicker-content`]: true,
    [className]: className,
    [makePanelStyles(k)]: true,
};
const classDatePickerObj = {
    [`${k}-datepicker`]: true,
    [makeHighlightStyles(k, size, highlightWidth.value, highlightLeft.value)]: range,
    [makeStyles(k)]: true,
}
const {isDisabledTime, isDisabledConfirm} = this.disabled;
const {startRef, endRef} = this.panel;
const generatePanel = (flag) => {
    return (
        <div class={`${k}-datepicker-calendar-time-wrapper`}>
            <DatepickerCalendar
                value={value}
                ev-change={onChangeDate}
                type={type === 'datetime' ? 'date' : type}
                flag={flag}
                ref={flag === PanelFlags.Start ? startRef : endRef}
                highlightPosition={position.value}
            />
            <div class={`${k}-datepicker-time-wrapper`} v-if={type === 'datetime'}>{
                (() => {
                    let timeValue = getTimeValue(flag);
                    if (flag === PanelFlags.End && !timeValue) {
                        timeValue = getTimeValue(PanelFlags.Start);
                    }
                    let timeString = '00:00:00';

                    if (timeValue) {
                        const valueString = this.formats.getShowString(timeValue).split(/\s+/);
                        timeString = valueString[1];
                    }

                    return <template>
                        <div class={`${k}-datepicker-time-time`}>{timeString}</div> 
                        <DatepickerTime
                            value={timeValue}
                            ev-$change:value={v => onChangeTime(v, flag)}
                            format={this.formats.getValueFormat()}
                            flag={flag}
                            isDisabledTime={isDisabledTime}
                        />
                    </template>
                })()
            }</div> 
        </div>
    );
};

<t:super class={classDatePickerObj} onClick={handleInputClick} alwaysShowOnClick={true}>
    <b:base-menu>
        <DropdownMenu class={classNameObj}>
            <div class={`${k}-datepicker-shortcuts`} v-if={shortcuts && shortcuts.length}>
                {shortcuts.map($value => {
                    const label = isFunction($value.label) ? $value.label() : $value.label;
                    return <div class={`${k}-datepicker-shortcut c-ellipsis`}
                        title={label}
                        ev-click={linkEvent($value, this.setByShortcut)}
                    >{label}</div>
                })}
            </div>
            <div class={`${k}-datepicker-wrapper`}>
                <div class={`${k}-datepicker-calendars`}>
                    {generatePanel(!showDualPanels && position.value === Position.End ? PanelFlags.End : PanelFlags.Start)}
                    {showDualPanels ? generatePanel(PanelFlags.End) :  null}
                </div>
                <div v-if={type === 'datetime'} class={`${k}-datepicker-footer`}>
                    <Button type="primary" size="small"
                        disabled={isDisabledConfirm()}
                        ev-click={onConfirm}
                    >{_$('确定')}</Button>
                </div>
            </div>
        </DropdownMenu>
    </b:base-menu>
    <b:suffix>
        <Icon class={`${k}-icon-calendar`} />
    </b:suffix>
</t:super>
