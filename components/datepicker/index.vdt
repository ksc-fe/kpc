import {linkEvent} from 'intact';
import {DropdownMenu} from '../dropdown';
import {DatepickerCalendar} from './calendar';
import {DatepickerTime} from './time';
import {Icon} from '../icon';
import {Button} from '../button';
import {_$} from '../../i18n';
import {makePanelStyles, makeDatePickRangeStyles} from './styles';
import {PanelTypes, PanelFlags} from './usePanel';
import {isFunction} from 'intact-shared';
import {Tabs, Tab} from '../tabs';

const {className, type, range, multiple, shortcuts} = this.get();
const {
    value: {value},
    onChangeDate,
    onConfirm,
    onChangeTime,
    onChangeDateForRange,
    getTimeValue,
} = this.value;
const { position, charLength, startTextLength, handleInputClick } = this.activePosition
const { k } = this.config;
const showPanel = range && position.value === 'end';
const positionDisplay = !multiple && range && (type === 'datetime' || type === 'date');
// 判断是否显示双面板
const showDualPanels = range && (type === 'date' || type === 'month' || type === 'year')

const classNameObj = {
    [`${k}-datepicker-content`]: true,
    [className]: className,
    [makePanelStyles(k)]: true,
};
const classDatePickerObj = {
    [`${k}-datepicker`]: true,
    [makeDatePickRangeStyles(k, position.value, positionDisplay, charLength.value)]: true,
}
const {isDisabledTime, isDisabledConfirm} = this.disabled;
const {startPanel, endPanel, getPanel, startRef, endRef} = this.panel;
const generatePanel = (flag) => {
    const panel = getPanel(flag);
    const timeValue = getTimeValue(flag);
    let dateString = '0000-00-00';
    let timeString = '00:00:00';

    if (type === 'datetime' && timeValue) {
        const valueString = this.formats.getShowString(timeValue).split(/\s+/);
        dateString = valueString[0];
        timeString = valueString[1];
    }

    return (
        <div class={`${k}-datepicker-calendar-time-wrapper`}>
            <DatepickerCalendar
                value={value}
                ev-change={onChangeDate}
                type={type === 'datetime' ? 'date' : type}
                flag={flag}
                ref={flag === PanelFlags.Start ? startRef : endRef}
            />
            <div class={`${k}-datepicker-time-wrapper`} v-if={type === 'datetime'}>
                <div class={`${k}-datepicker-time-time`}>{timeString}</div> 
                <DatepickerTime
                    value={timeValue}
                    ev-$change:value={v => onChangeTime(v, flag)}
                    format={this.formats.getValueFormat()}
                    flag={flag}
                    isDisabledTime={isDisabledTime}
                />
            </div> 
        </div>
    );
};

<t:super class={classDatePickerObj} onClick={handleInputClick}>
    <b:base-menu>
        <DropdownMenu class={classNameObj}>
            <div class={`${k}-datepicker-shortcuts`} v-if={shortcuts && shortcuts.length}>
                {shortcuts.map($value => {
                    const label = isFunction($value.label) ? $value.label() : $value.label;
                    return <div class={`${k}-datepicker-shortcut c-ellipsis`}
                        title={label}
                        ev-click={linkEvent($value, this.setByShortcut)}
                    >{label}</div>
                })}
            </div>
            <div class={`${k}-datepicker-wrapper`}>
                <div class={`${k}-datepicker-calendars`}>
                    { showDualPanels ? generatePanel(PanelFlags.Start) : (showPanel ? null : generatePanel(PanelFlags.Start))}
                    { showDualPanels ? generatePanel(PanelFlags.End) : (showPanel ? generatePanel(PanelFlags.End) : null)}
                </div>
                <div v-if={type === 'datetime'} class={`${k}-datepicker-footer`}>
                    <Button type="primary" size="small"
                        disabled={isDisabledConfirm()}
                        ev-click={onConfirm}
                    >{_$('确定')}</Button>
                </div>
            </div>
        </DropdownMenu>
    </b:base-menu>
    <b:suffix>
        <Icon class={`${k}-icon-calendar`} />
    </b:suffix>
</t:super>
