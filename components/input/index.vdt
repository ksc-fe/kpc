import {Icon} from '../icon';
import {addStyle, isTextBlock, getRestProps, stopPropagation} from '../utils';
import {makeStyles} from './styles';
import {noop, isNullOrUndefined, isStringOrNumber} from 'intact-shared';
import {Wave} from '../wave';
import {context as ErrorContext} from '../form/useError';

const {
    className, style, type, value, defaultValue, placeholder,
    clearable, disabled, size, rows, autoWidth, fluid,
    width, stackClearIcon, frozenOnInput, readonly, inline,
    waveDisabled, resize, flat, showCount, maxlength,
    
    'ev-click': click,
    'ev-mounseenter': mouseenter,
    'ev-mouseleave': mouseleave,

    ...rest
} = this.get();

const {
    inputing: {value: inputing},
    originalValue: {value: originalValue},
    startInput, onInput, endInput
} = this.frozen;
const { isFocus, focusInputOnClick }= this.focusHook;

const isNotAutoRows = isStringOrNumber(rows) && rows !== 'auto';
const { k } = this.config;

const classNameObj = {
    [`${k}-input`]: true,
    [`${k}-${size}`]: size !== 'default',
    [`${k}-group`]: $blocks.prepend || $blocks.append,
    [`${k}-disabled`]: disabled,
    [`${k}-clearable`]: clearable,
    [`${k}-auto-width`]: autoWidth,
    [`${k}-fluid`]: fluid,
    [`${k}-stack-clear`]: stackClearIcon,
    [`${k}-inline`]: inline,
    [`${k}-flat`]: flat,
    [`${k}-type-textarea`]: type === 'textarea',
    [`${k}-focus`]: isFocus.value,
    [`${k}-resize-${resize}`]: type === 'textarea' && isNotAutoRows,
    [`${k}-resize-none`]: type === 'textarea' && !isNotAutoRows,
    [className]: className,
    [makeStyles(k)]: true,
}

const {
    isShow: isShowPassword,
    toggleShow: toggleShowPassword,
    type: showPasswordType,
    showIcon: showPasswordIcon,
} = this.showPassword;

const {fakeRef, width: {value: fakeWidth}} = this.autoWidth;
const height = this.autoRows;

const inputValue = frozenOnInput && inputing ? originalValue : value;
const hasInputValue = !isNullOrUndefined(inputValue);
const hasValue = hasInputValue && inputValue !== '';
const inputProps = {
    ...getRestProps(this, rest),
    'ev-focus': startInput,
    'ev-blur': endInput,
    'ev-input': onInput,
    defaultValue,
    readOnly: readonly,
    placeholder,
    disabled,
    maxLength: maxlength,
    ref: this.inputRef,
    style: autoWidth && fakeWidth ? {width: fakeWidth + 'px'} : undefined,
};
// if we pass value to input element, the input is controlled and the
// defaultValue does not work
if (hasInputValue) {
    inputProps.value = inputValue;
}
<div class={classNameObj}
    style={width != null ? addStyle(style, {width: `${width}px`}) : style} 
    ev-click={click}
    ev-mouseenter={mouseenter}
    ev-mouseleave={mouseleave}
>
    {do {
        if ($blocks.prepend) {
            // if the children of this block is text node
            // we add a padding to the wrapper node
            // so we handle this block manually
            const children = $blocks.prepend(noop);
            <div class={{
                [`${k}-input-prepend`]: true, 
                [`${k}-input-padding`]: isTextBlock(children)
        }}>{children}</div>
        }
    }}
    <ErrorContext.Consumer defaultValue={false}>
        {isInvalid => {
            return <Wave disabled={waveDisabled || disabled || isInvalid} inset="-2px">
                <div class={`${k}-input-wrapper`} ev-click={focusInputOnClick}>
                    <div class={`${k}-input-prefix`} v-if={$blocks.prefix}>
                        <b:prefix />
                    </div>
                    <input v-if={type !== 'textarea'}
                        {...inputProps}
                        class={`${k}-input-inner`} 
                        type={showPasswordType.value}
                    />
                    <textarea v-else 
                        {...inputProps}
                        class={`${k}-input-inner ${k}-textarea`}
                        rows={isNotAutoRows ? rows : 1}
                        style={height.value ? addStyle(inputProps.style, { height: height.value + 'px' }) : inputProps.style}
                    ></textarea>
                    <div class={`${k}-input-suffix`}
                        v-if={$blocks.suffix || clearable && !disabled || showPasswordIcon.value || showCount}
                        ev-click={stopPropagation}
                    >
                        <template v-if={showPasswordIcon.value}>
                            <Icon hoverable
                                class={{
                                    [`${k}-input-show-password`]: true,
                                    [`${k}-icon-hidden`]: !isShowPassword.value,
                                    [`${k}-icon-visible`]: isShowPassword.value,
                                }}
                                ev-click={toggleShowPassword}
                            />{' '}
                        </template>
                        <Icon v-if={clearable && !disabled}
                            class={{
                                [`${k}-input-clear ${k}-icon-error-fill`]: true, 
                                [`${k}-input-show`]: hasValue,
                            }}
                            ev-click={this.clear}
                            hoverable
                        />{' '}
                        <span class={`${k}-input-count`} v-if={showCount}>
                            {hasValue ? value.length : 0}
                            <span v-if={maxlength}> / {maxlength}</span>
                        </span>
                        <b:suffix />
                    </div>
                    <div class={`${k}-input-fake`} v-if={autoWidth}>
                        <pre ref={fakeRef}>{!hasValue ? (hasInputValue || !defaultValue ? placeholder : defaultValue) : inputValue}</pre>
                    </div>
                </div>
            </Wave>
        }}
    </ErrorContext.Consumer>
    {do {
        if ($blocks.append) {
            const children = $blocks.append(noop);
            <div class={{
                [`${k}-input-append`]: true, 
                [`${k}-input-padding`]: isTextBlock(children)
            }}>{children}</div> 
        }
    }}
</div>
