import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';
import {isStringOrNumber, getTextByChildren, addStyle, _$, getRestProps, noop} from '../utils';
import Option from './option';
import OptionGroup from './group';
import {Tabs, Tab} from '../tabs';
import Icon from '../icon';
import Button from '../button';
import Checkbox from '../checkbox';

const {
    className, clearable, data, value,
    disabled, filterable, keywords, _show,
    placeholder, size, style, name, children,
    fluid, width, allowUnmatch, card, hideIcon,
    container, inline, loading, position,
    searchable, autoDisableIcon
} = self.get();

/* istanbul ignore if */
if (filterable && blocks.value) {
    _e(new Error(`You can't specify "value" extension point with 'filterable'.`));
}

const multiple = self._isMultiple();

let _activeLabel = self.get('_activeLabel');

const _placeholder = placeholder == null ?
    (allowUnmatch && filterable) ? _$('请输入或选择') : _$('请选择') :
    placeholder;

const classNameObj = {
    'k-select': true,
    [className]: className,
    [scope.className]: scope.className,
    'k-disabled': disabled,
    'k-show': _show,
    'k-clearable': clearable,
    [`k-${size}`]: size !== 'default',
    'k-fluid': fluid,
    'k-with-prefix': blocks.prefix,
    'k-with-suffix': !hideIcon || loading || blocks.suffix,
    'k-inline': inline,
};

let hasValue = value != null && (!multiple && value !== '' || multiple && value.length);
const isGroup = Array.isArray(self.get('data.0.data'));

const labelObj = scope.labelObj || {
    // only show value as label when allowUnmatch or loading is true, #40 #529
    label: (loading || allowUnmatch) && isStringOrNumber(value) ? value : null,
    labels: (loading || allowUnmatch) && Array.isArray(value) ? value.slice() : [],
};
let groupIndex = 0;
let hasData = isGroup;
let hasOnlyOneValidOptionAndSelected = null;

const setHasOnlyOneValidOptionAndSelected = active => {
    if (hasOnlyOneValidOptionAndSelected === null) {
        hasOnlyOneValidOptionAndSelected = active;
    } else {
        hasOnlyOneValidOptionAndSelected = false;
    }
}

const allShowedValues = [];

const WrapCheckbox = (props) => {
    return (
        <Checkbox v-model="_checkedKeys" trueValue={{ props.value }} disabled={{ !!props.disabled }}>
            {{ props.children }}
        </Checkbox>
    )
};

const Options = props => {
    const data = props.data;
    const ret = [];
    data.forEach((item, index) => {
        // deprecate text, use label instead of
        if (item.text) item.label = item.text;
        
        const {valid, active} = self.handleProps(item, labelObj);

        if (valid) {
            let children = item.template ? item.template(item, index) : item.label;
            if (searchable && multiple) {
                children = <WrapCheckbox value={{ item.value }} disabled={{ item.disabled }}>{{ children }}</WrapCheckbox>
            }
            ret.push(
                <DropdownItem 
                    ev-select={{ self._onSelect.bind(self, item.value) }}
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    hideOnSelect={{ !multiple }}
                >{{ children }}</DropdownItem>
            );

            // for card type groups, we need to highlight the parent label
            if (active && card) {
                if (_activeLabel == null && _show) {
                    _activeLabel = groupIndex;
                    self._setActiveLabelSilent(_activeLabel);
                }
            }
            hasData = true;
            setHasOnlyOneValidOptionAndSelected(active);

            if (!item.disabled) {
                allShowedValues.push(item.value);
            }
        }
    });

    return ret;
}

const OptionsVNodes = ({children}) => {
    return __u.map(children ? (Array.isArray(children) ? children : [children]) : children, vNode => {
        if (vNode.tag === Option) {
            let props = vNode.props;
            props = {
                ...props, 
                'ev-select': self._onSelect.bind(self, props.value),
                hideOnSelect: !multiple,
                label: props.label || getTextByChildren(props.children),
                children: props.children || props.label ,
            };
            const {active, valid} = self.handleProps(props, labelObj);
            if (!valid) {
                return hc('', vNode.key);
            }
            props.className = _className({
                [props.className]: props.className,
                'k-active': active,
            });
            hasData = true;
            setHasOnlyOneValidOptionAndSelected(active);

            if (!props.disabled) {
                allShowedValues.push(props.value);
            }

            // for card type groups, we need to highlight the parent label
            if (active && card) {
                if (_activeLabel == null && _show) {
                    _activeLabel = groupIndex;
                    self._setActiveLabelSilent(_activeLabel);
                }
            }

            // if the multiple select option is active
            // add a √ icon
            if (active && multiple && !searchable) {
                props.children = [
                    props.children,
                    <i class="k-checkmark ion-ios-checkmark-empty"></i>
                ];
            }

            // if show search input in menu and support multiple selections, wrap Option by Checkbox
            if (searchable && multiple) {
                props.children = <WrapCheckbox value={{ props.value }} disabled={{ props.disabled }}>{{ props.children }}</WrapCheckbox>
            }

            // return the cloned vNode
            vNode = _Vdt.miss.clone(vNode);
            vNode.props = props;
        } else if (vNode.tag === OptionGroup) {
            let props = vNode.props;
            // if none of childern meet the filter, the group label will not be displayed
            // #579
            if (!self.handleGroupProps(props.children, vNode)) {
                return hc('', vNode.key);
            }
            hasData = true;
            props = {
                ...props,
                children: <OptionsVNodes>{{ props.children }}</OptionsVNodes>
            };
            vNode = _Vdt.miss.clone(vNode);
            vNode.props = props;
            groupIndex++;
        }

        return vNode;
    }); 
} 

const labelList = [];

const Menu = scope.Menu || (
    <DropdownMenu ev-$changed:value={{ self._position }}
        ref="menu"
        class={{ {
            "k-select-dropdown": true,
            "k-card": card,
            [className]: className,
            'k-searchable': searchable,
        } }}
        ev-$change:value={{ self._onChangeShow }}
    >
        <template>
            <b:menu>
                {{ (() => {
                    let _children = [];
                    if (!isGroup) {
                        _children.push(<Options data={{ data }} />);
                    } else {
                        _children.push(
                            <OptionGroup v-for={{ data }} label={{ value.label }}>
                                <Options data={{ value.data }} parentLabel={{ value.label }} />
                            </OptionGroup>
                        );
                    }
                    _children.push(<OptionsVNodes>{{ children }}</OptionsVNodes>);

                    // if it is card type group, we extract the label as navBar
                    if (card) {
                        const vNodes = [];
                        let index = 0;
                        function flattenEach(children) {
                            children.forEach(vNode => {
                                if (Array.isArray(vNode)) {
                                    flattenEach(vNode);
                                } else if (vNode) {
                                    if (vNode.tag === OptionGroup) {
                                        const props = vNode.props;
                                        const label = (props._blocks || {}).label || props.label;
                                        labelList.push({label});
                                        vNode.props = {...props, _card: true};

                                        // if the _activeLabel is undefined
                                        // we active the first label
                                        if (_activeLabel == null && _show) {
                                            _activeLabel = index;
                                            self._setActiveLabelSilent(index);
                                        }

                                        // only render the active options
                                        if (_activeLabel === index) {
                                            vNodes.push(vNode);
                                        }
                                        index++;
                                    } else {
                                        vNodes.push(vNode);
                                    }
                                }
                            });
                        }
                        flattenEach(_children);
                        _children = [ 
                            <Tabs vertical type="border-card" v-model="_activeLabel">
                                <Tab v-for={{ labelList }} value={{ key }}>
                                    {{ typeof value.label === 'function' ? 
                                        // pass by block
                                        value.label(noop) :
                                        // pass by property
                                        value.label
                                    }}
                                </Tab>
                            </Tabs>,
                            <div class="k-groups">{{ vNodes }}</div>
                        ];
                    }
                    if (!hasData) {
                        _children = <div class="k-no-data">{{ _$('无数据') }}</div>;
                    }
                    
                    // if searchable, add a search input to menu
                    if (searchable) {
                        _children = <template>
                            <div class="k-select-header">
                                <Input fluid size="small" placeholder={{ _$('请输入关键字') }}
                                    value={{ keywords }}
                                    ev-input={{ self._onSearch }}
                                    clearable
                                >
                                    <b:suffix><Icon class="ion-ios-search" /></b:suffix>
                                </Input>
                                <div class="k-select-op" v-if={{ multiple }}>
                                    <Button type="link" size="small"
                                        ev-click={{ self._selectAll.bind(self, allShowedValues) }}
                                    >{{ _$('全选') }}</Button>  
                                    <Button type="link" size="small"
                                        ev-click={{ self._toggleSelect.bind(self, allShowedValues) }}
                                    >{{ _$('反选') }}</Button>  
                                    <Button type="link" size="small"
                                        ev-click={{ self._unselectAll.bind(self, allShowedValues) }}
                                    >{{ _$('清空') }}</Button>  
                                </div>
                            </div>
                            <div class="k-select-body">
                                {{ _children }}
                            </div>
                            <div class="k-select-footer" v-if={{ multiple }}>
                                <Button type="primary" size="small" ev-click={{ self._confirm }}>{{ _$('确定') }}</Button>
                                <Button size="small" ev-click={{ self.hide }}>{{ _$('取消') }}</Button>
                            </div>
                        </template>
                    }

                    return _children;
                })() }}
            </b:menu>
        </template>
    </DropdownMenu>
);

// if the value is not in options, then set hasValue to false
if (hasValue && (!allowUnmatch && labelObj.label == null && !labelObj.labels.length) && !loading) {
    hasValue = false;
    // if this is a value, but the value does not exist in options
    // we set it to empty, #41
    self._clearValue();
}

<div class={{ {...classNameObj, 'k-has-value': hasValue} }}
    {{ ...getRestProps(self) }}
    style={{ width != null ? addStyle(style, {width: `${width}px`}) : style }} 
    tabindex={{ disabled ? "-1" : "0" }}
    ev-keypress={{ self._onKeypress }}
    ev-keydown={{ self._onKeydown }}
    ev-focusout={{ self._onInputFocusOut }}
>
    <Dropdown
        position={{ position }} 
        trigger="click"
        disabled={{ disabled }}
        ref="dropdown"
        container={{ container }}
        ev-hide={{ self._onHide }}
    >
        <div class="k-wrapper" ev-click={{ self._focusInput }} tabindex="-1" ref="wrapper">
            <div class="k-prefix" v-if={{ blocks.prefix }}>
                <b:prefix />
            </div>
            <Animate a:disabled class="k-main">
                <input type="hidden" value={{ value }} name={{ name }} />
                <Input v-if={{ !multiple && filterable }}
                    value={{ keywords == null ? labelObj.label : keywords }}
                    ev-input={{ self._onSearch }}
                    ev-focus={{ self._selectInput }}
                    disabled={{ disabled }}
                    placeholder={{ _placeholder }}
                    ref="input"
                    size={{ size }}
                    fluid
                />
                <span class="k-placeholder c-ellipsis" v-else-if={{ !filterable && !hasValue }}>{{ _placeholder }}</span>
                <span class="k-value c-ellipsis" v-else-if={{ !multiple }}>
                    <b:value args={{ [value, labelObj.label] }}>
                        {{ labelObj.label }}
                    </b:value>
                </span>
                <Animate a:tag="span" a:disabled class={{ {
                    "k-values": true,
                    "k-with-values": blocks.values,
                } }} v-else>
                    <template>
                        <b:values args={{ [value, labelObj.labels] }}>
                            <Animate a:tag="span" class="k-select-tag" 
                                v-for={{ labelObj.labels }} 
                                v-for-value="item"
                                v-for-key="index"
                                key={{ value[index] }}
                                a:transition="c-fade"
                            >
                                <span class="k-text">
                                    <b:value args={{ [value[index], item] }}>
                                        {{ item }}
                                    </b:value>
                                </span>
                                <Icon class="ion-ios-close-empty k-close"
                                    ev-click={{ self._delete.bind(self, value[index]) }}
                                />
                            </Animate>
                        </b:values>
                    </template>
                    <Input v-if={{ filterable }}
                        value={{ keywords }}
                        ev-input={{ self._onSearch }}
                        disabled={{ disabled }}
                        placeholder={{ !hasValue ? _placeholder : '' }}
                        ref="input"
                        size={{ size }}
                        autoWidth
                    />
                </Animate>
            </Animate>
            <span class="k-suffix" v-if={{ !hideIcon || clearable || loading || blocks.suffix }}>
                <Icon v-if={{ clearable }}
                    class={{ {"k-clear ion-ios-close": true, "k-show": hasValue} }}
                    ev-click={{ self._onClear }}
                />
                <span class="k-suffix-icon">
                    <b:suffix>
                        <Icon class="ion-load-c icon-loading" v-if={{ loading }} />
                        <Icon class="k-arrow ion-arrow-down-b" v-else-if={{ !hideIcon }}
                            color={{ 
                                disabled || 
                                autoDisableIcon && (!hasData || hasOnlyOneValidOptionAndSelected) ? 
                                    'disabled' :
                                    null
                            }}
                        />
                    </b:suffix>
                </span>
            </span>
        </div>{{ 
        Menu 
    }}</Dropdown>
</div>
