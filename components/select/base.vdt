import {TransitionGroup, Transition} from 'intact';
import {Input} from '../input';
import {Icon} from '../icon';
import {isNullOrUndefined, isStringOrNumber} from 'intact-shared';
import {makeStyles} from './styles';
import {Dropdown} from '../dropdown';
import {getRestProps, addStyle} from '../utils';
import {Wave} from '../wave';
import {context as ErrorContext} from '../form/useError';
import {Tags, Tag} from '../tag';

const {
    value, multiple,
    loading, disabled, name,
    size, hideIcon, fluid,
    clearable, filterable,
    className, container,
    inline, style, width, show,
    position, flat, nowrap,
    draggable,
} = this.get();
const { k } = this.config;

const classNameObj = {
    [`${k}-select`]: true,
    [`${k}-disabled`]: disabled,
    [`${k}-${size}`]: size !== 'default',
    [`${k}-fluid`]: fluid,
    [`${k}-inline`]: inline,
    [`${k}-flat`]: flat,
    [`${k}-nowrap`]: nowrap,
    [className]: className,
    [$props.className]: $props.className,
    [makeStyles(k)]: true,
};

const placeholder = this.getPlaceholder();
const label = this.getLabel();
const hasValue = this.hasValue();
const {onInput, inputRef, keywords: {value: keywords}} = this.input;
const {onFocusout, triggerRef} = this.focusout;
const {isClosable} = this.immutable;
const filterInput = <Input v-if={filterable}
    class={`${k}-select-input`}
    value={keywords}
    ev-$change:value={onInput}
    disabled={disabled}
    placeholder={!hasValue ? placeholder : ''}
    ref={inputRef}
    autoWidth
    inline
    size={size}
    key="filter"
    readonly={!show}
    waveDisabled={true}
    flat={flat}
/>

<ErrorContext.Consumer defaultValue={false}>
    {isInvalid => {
        return <Wave disabled={disabled || isInvalid || inline} inset="-2px">
            <Dropdown
                trigger="click"
                ref={this.dropdownRef}
                disabled={disabled}
                container={container}
                v-model="show"
                position={position}
            >
                <div {...getRestProps(this)} 
                    class={classNameObj}
                    tabindex={disabled ? '-1' : '0'}
                    ev-keydown={this.onKeydown}
                    ev-focusout={onFocusout}
                    style={!isNullOrUndefined(width) ? addStyle(style, {width: `${width}px`}) : style}
                    ref={triggerRef}
                >
                    <div class={`${k}-select-prefix`} v-if={$blocks.prefix}>
                        <b:prefix />
                    </div>
                    <div class={`${k}-select-main`}>
                        <input type="hidden" value={value} name={name} key="hidden-input" />
                        {/* TODO: Need mode on Transition */}
                        <TransitionGroup name="k-fade" appear={false}>
                            <Input v-if={!multiple && filterable}
                                value={show ? keywords : label}
                                ev-$change:value={onInput}
                                disabled={disabled}
                                placeholder={label || placeholder}
                                ref={inputRef}
                                size={size}
                                fluid
                                inline
                                key="input"
                                readonly={!show}
                                waveDisabled={true}
                                flat={flat}
                            />
                            <div class={`${k}-select-placeholder c-ellipsis`}
                                v-else-if={!filterable && !hasValue}
                                key="placeholder"
                            >{placeholder}</div>
                            <div class={`${k}-select-value c-ellipsis`} v-else-if={!multiple} key="value">
                                <b:value params={[value, label]}>
                                    {label}
                                </b:value>
                            </div>
                            <div v-else key="values" class={`${k}-select-values`}>
                                <b:values params={[value, label]}>
                                    <Tags v-if={label && label.length || filterable}
                                        nowrap={nowrap}
                                        size={size}
                                        draggable={draggable}
                                        ev-dragend={this.draggable}
                                    >
                                        <Tag
                                            v-for={label}
                                            v-for-value="$label"
                                            key={
                                                isStringOrNumber($label) ? 
                                                    $label :
                                                    isStringOrNumber(value[$key]) ?
                                                        value[$key] :
                                                        $key
                                            }
                                            closable={isClosable(value[$key])}
                                            ev-close={this.delete.bind(this, $key)}
                                            disabled={disabled}
                                            size={size}
                                        >
                                            <template>
                                                <b:value params={[value[$key], $label]}>
                                                    {$label}
                                                </b:value>
                                            </template>
                                        </Tag>
                                        <b:append>{filterInput}</b:append>
                                    </Tags>
                                </b:values>
                                <template v-if={$blocks && $blocks.values}>{filterInput}</template>
                            </div>
                        </TransitionGroup>
                    </div>
                    <span class={`${k}-select-suffix`} v-if={!hideIcon || clearable || loading || $blocks.suffix}>
                        <Icon v-if={clearable && !disabled}
                            class={{[`${k}-select-clear ion-ios-close`]: true, [`${k}-show`]: hasValue}}
                            ev-click={this.clear}
                            hoverable
                        />
                        <span class={`${k}-select-suffix-icon`}>
                            <b:suffix>
                                <Icon class="ion-load-c" rotate v-if={loading} />
                                <template v-else-if={!hideIcon}>
                                    <Icon class={`${k}-icon-search`} v-if={filterable && show} />
                                    <Icon v-else
                                        class={`${k}-select-arrow ${k}-icon-down`}
                                        disabled={$props.isDisableArrow}
                                    />
                                </template>
                            </b:suffix>
                        </span>
                    </span>
                </div> 
                <template>
                    <b:base-menu>
                        <div>should be implemeted</div>
                    </b:base-menu>
                </template>
            </Dropdown>
        </Wave>
    }}
</ErrorContext.Consumer>
