import {getRestProps, mapChildren} from '../utils';
import {BreadcrumbItem} from './item';
import { makeStyles } from './styles';
import { Icon } from '../icon';

const {children, separator, className} = this.get();
const { k } = this.config;

const classNameObj = {
    [`${k}-breadcrumb`]: true,
    [className]: className,
    [makeStyles(k)]: true,
};

const separatorVNode = (
    <span class={`${k}-breadcrumb-separator`}>
        <template v-if={!$blocks.separator && !separator}>
            <Icon class="k-icon-right" size="small"/>
        </template>
        <b:separator v-else>{separator}</b:separator>
    </span>
);
const vNodes = [];
let lastIndex = -1;
let separatorAmount = 0;
mapChildren(children, (vNode, index) => {
    vNodes.push(vNode);
    if (vNode.tag === BreadcrumbItem) {
        lastIndex = index;
        separatorAmount++;
        vNodes.push(separatorVNode);
    }
});
// remove the last BreadcrumbItem's separator,
// because it may have other vNodes follow the last BreadcrumbItem.
// we record the last separator's index and splice array like bellow to remove it
if (lastIndex > -1) {
    vNodes.splice(lastIndex + separatorAmount, 1);
}

<div class={classNameObj} {...getRestProps(this)}>
    {vNodes}
</div>
